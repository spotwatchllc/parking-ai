/**
  ******************************************************************************
  * @file    ai_dpu.h
  * @author  MCD Application Team
  * @version V1.0.0
  * @date    25-November-2024
  * @brief   This file is implementing ai processing functions that are making
  * 		 use of libraries generated by X-CUBE-AI
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */


/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef _AI_DPU_H
#define _AI_DPU_H

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dpu_config.h"
#include "ll_aton_runtime.h"
#include "ai_wrapper_ATON.h"
#include "ai_platform.h"
#include "aiTestUtility.h"

/* Exported constants --------------------------------------------------------*/
#define AI_MNETWORK_NUMBER         (1U)
#define AI_DPU_SHAPE_SIZE          (4U)
#define AI_DPU_SHAPE_BATCH_MAX     (1U)
#define AI_DPU_SHAPE_HEIGHT_MAX    (100U)
#define AI_DPU_SHAPE_WIDTH_MAX     (300U)
#define AI_DPU_SHAPE_CHANNEL_MAX   (100U)
#define AI_DPU_NB_MAX_INPUT        (1U)
#define AI_DPU_NB_MAX_OUTPUT       (1U)
#define AI_DPU_IO_BUFFER_MAX       (6U)

typedef struct {
  const char *name;
  const char *compile_datetime;
  uint32_t version;
  uint32_t n_inputs;
  uint32_t n_outputs;
  const LL_Buffer_InfoTypeDef* in_bufs[AI_DPU_IO_BUFFER_MAX];
  const LL_Buffer_InfoTypeDef* out_bufs[AI_DPU_IO_BUFFER_MAX];
  uint32_t n_epoches;
  uint32_t activations;
  uint32_t params;
} aton_model_info_t;

typedef struct {
  /**
  * Atonn execution context
  */
  struct npu_instance net_exec_ctx[NPU_NETWORK_NUMBER];
  /**
  * Specifies the quantization parameters of teh unique input of the network
  */
  float  input_Q_inv_scale;
  int8_t input_Q_offset;
}AIProcCtx_t;

/* Exported functions --------------------------------------------------------*/
int AiDPULoadModel(AIProcCtx_t * pxCtx, const char *name);
int AiDPUReleaseModel(AIProcCtx_t * pxCtx);
int AiDPUProcess(AIProcCtx_t *pxCtx);

#endif /* _AI_DPU_H */
